package app.monetization;

import app.audio.Collections.Merch;
import app.audio.Files.Song;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonetizationStats {
    private static final double ONE_HUNDRED = 100.0;

    private double songRevenue;
    private double merchRevenue;
    private Map<Song, Double> songsRevenue = null;

    public MonetizationStats() {
        this.songRevenue = 0.0;
        this.merchRevenue = 0.0;
        this.songsRevenue = new HashMap<>();
    }

    /**
     * Adds revenue to a specific song and updates the total song revenue.
     * This method updates both the individual song's revenue and the cumulative revenue
     * from all songs.
     *
     * @param song The song for which revenue is being added.
     * @param revenue The amount of revenue generated by the song.
     */
    public final void addSongRevenue(final Song song, final double revenue) {
        Double v = songsRevenue.getOrDefault(song, 0.0);
        v += revenue;
        songRevenue += revenue;
        songsRevenue.put(song, v);
    }

    /**
     * Adds revenue generated from merchandise sales.
     * Increments the total merchandise revenue by the price of the provided merchandise item.
     *
     * @param merch The merchandise item from which revenue is generated.
     */
    public final void addMerchRevenue(final Merch merch) {
        if (merch != null) {
            merchRevenue += merch.getPrice();
        }
    }

    /**
     * Identifies and returns the name of the most profitable song.
     * Sorts songs by their generated revenue and selects the top-earning song.
     *
     * @return The name of the most profitable song or "N/A" if none.
     */
    public final String getMostProfitableSong() {
        if (songsRevenue.isEmpty()) {
            return "N/A";
        }
        List<Map.Entry<Song, Double>> sortedList = songsRevenue.entrySet()
                .stream()
                .sorted(Map.Entry.<Song, Double>comparingByValue(java.util.Comparator
                                .reverseOrder())
                        .thenComparing(entry -> entry.getKey().getName()))
                .toList();
        Map.Entry<Song, Double> first = sortedList.get(0);
        if (first.getValue() == 0.0) {
            return "N/A";
        }
        return first.getKey().getName();
    }

    public final double getSongRevenue() {
        return songRevenue;
    }
    public final double getTotalRevenue() {
        return songRevenue + merchRevenue;
    }

    public final double getMerchRevenue() {
        return merchRevenue;
    }

    public final double getSongRevenueToPrint() {
            return Math.round(songRevenue * ONE_HUNDRED) / ONE_HUNDRED;
    }

    public final double getMerchRevenueToPrint() {
        return Math.round(merchRevenue * ONE_HUNDRED) / ONE_HUNDRED;
    }

}
